service: games-night-api

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: eu-west-1
  environment:
    usersTableName: GamesNightUsers
    sessionsTableName: GamesNightSessions
    s3BucketName: games-night-data
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:eu-west-1:*:*'
    - Effect: 'Allow'
      Action: '*'
      Resource: 'arn:aws:s3:::games-night-data/*'
  # websocketsApiName: gamesNight-websockets-api
  # websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body

functions:
  websocket-connect:
    handler: lambdas/websockets/connect.main
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: lambdas/websockets/disconnect.main
    events:
      - websocket:
          route: $disconnect
  websocket-default:
    handler: lambdas/websockets/default.main
    events:
      - websocket:
          route: $default
  websocket-username:
    handler: lambdas/websockets/username.main
    events:
      - websocket:
          route: username
  websocket-host:
    handler: lambdas/websockets/hostServer.main
    events:
      - websocket:
          route: hostserver
  websocket-join:
    handler: lambdas/websockets/joinServer.main
    events:
      - websocket:
          route: joinsession
  websocket-ping:
    handler: lambdas/websockets/ping.main
    events:
      - websocket:
          route: ping
  ##################### Articulate Routes ##########################
  articulate-teamselect:
    handler: lambdas/websockets/articulate/teamSelect.main
    events:
      - websocket:
          route: articulateteamselect
  articulate-statechange:
    handler: lambdas/websockets/articulate/stateChange.main
    events:
      - websocket:
          route: articulatestatechange
  articulate-modechange:
    handler: lambdas/websockets/articulate/modeChange.main
    events:
      - websocket:
          route: articulatemodechange
  articulate-getData:
    handler: lambdas/websockets/articulate/getData.main
    events:
      - websocket:
          route: articulatedatafetch
  articulate-nextRound:
    handler: lambdas/websockets/articulate/nextRound.main
    events:
      - websocket:
          route: articulatenextround
  articulate-startRound:
    handler: lambdas/websockets/articulate/startRound.main
    events:
      - websocket:
          route: articulateroundstart
  articulate-scoreUpdate:
    handler: lambdas/websockets/articulate/scoreUpdate.main
    events:
      - websocket:
          route: articulatescoreupdate
  articulate-toSummary:
    handler: lambdas/websockets/articulate/toSummary.main
    events:
      - websocket:
          route: articulatetosummary
  articulate-endGame:
    handler: lambdas/websockets/articulate/endGame.main
    events:
      - websocket:
          route: articulateendgame
# # Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
